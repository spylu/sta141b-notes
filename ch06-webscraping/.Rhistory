library(tidyverse)
library(rvest)
html <- read_html("https://www.imdb.com/chart/top/?ref_=nv_mv_250")
html
# it finds all the <td> nodes, but we only need the node with class `titleColumn`
td_nodes <- html %>% html_nodes("td")
# it finds all the <td> nodes with class titleColumn
title_columns <- html %>% html_nodes("td.titleColumn")
title_columns
html <- read_html("https://www.imdb.com/chart/top/?ref_=nv_mv_250")
# it finds all the <td> nodes, but we only need the node with class `titleColumn`
td_nodes <- html %>% html_nodes("td")
# it finds all the <td> nodes with class titleColumn
title_columns <- html %>% html_nodes("td.titleColumn")
# it finds all the <a> nodes within <td> nodes with class titleColumn
a_nodes <- title_columns %>% html_nodes("a")
# html_text to get the values inside the <a> </a> tag
movie_names <- a_nodes %>% html_text()
head(movie_names)
movie_names <- html %>%
html_nodes("td.titleColumn") %>%
html_nodes("a") %>%
html_text()
movie_names
imdb_ratings <-  html %>%
# Don't put space behind period because that would indicate descendant
html_nodes("td.ratingColumn.imdbRating") %>%
html_nodes("strong") %>%
html_text()
imdb_ratings
html %>% html_node("table.chart.full-width") %>%
html_table()
html %>% html_node("table.chart.full-width") %>%
html_table()
tibble(title = movie_names, rating = imdb_ratings)
# using `html_nodes` would get you list of things
html %>% html_node("table.chart.full-width") %>%
html_table() %>%
as_tibble(.name_repair = "unique") %>%
select(rank_and_title = `Rank & Title`, rating = `IMDb Rating`) %>%
separate(rank_and_title, c("rank", "title", "year"), sep = "\n")
html %>% html_node("table.chart.full-width") %>%
html_table()
html %>% html_node("table.chart.full-width") %>%
html_table() %>%
as_tibble(.name_repair = "unique") %>%
select(rank_and_title = `Rank & Title`, rating = `IMDb Rating`)
imdb_ratings
tibble(title = movie_names, rating = imdb_ratings)
# using `html_nodes` would get you list of things
html %>% html_node("table.chart.full-width") %>%
html_table() %>%
# Makes sure names are unique so you can `select` later
as_tibble(.name_repair = "unique") %>%
select(rank_and_title = `Rank & Title`, rating = `IMDb Rating`) %>%
# Need `separate` because rank and title are merged
separate(rank_and_title, c("rank", "title", "year"), sep = "\n")
# using `html_nodes` would get you list of things
html %>% html_node("table.chart.full-width") %>%
html_table() %>%
# Makes sure names are unique so you can `select` later
as_tibble(.name_repair = "unique") %>%
select(rank_and_title = `Rank & Title`, rating = `IMDb Rating`) %>%
# Need `separate` because rank and title are merged
separate(rank_and_title, c("rank", "title", "year"), sep = "\n")
html %>% html_node("table.chart.full-width") %>%
html_table() %>%
# Makes sure names are unique so you can `select` later
as_tibble(.name_repair = "unique") %>%
select(rank_and_title = `Rank & Title`, rating = `IMDb Rating`)
shawshank_url <- html %>%
html_nodes("td.titleColumn") %>%
html_nodes("a") %>%
keep(html_text(.) == "The Shawshank Redemption") %>%
html_attr("href")
library(RSelenium)
install.packages('Rselenium')
install.packages('RSelenium')
install.packages('wdman')
library(RSelenium)
library(wdman)
port <- httpuv::randomPort()
server <- chrome(port = port, version = "80.0.3987.106", verbose = FALSE)
